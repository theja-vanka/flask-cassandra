#Create Keyspace
CREATE KEYSPACE brand_dev WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}  AND durable_writes = true;

#Create Tables
CREATE TABLE IF NOT EXISTS brand_dev.customer_master (
    customer_code int,
    customer_name text,
    latitude double,
    longitude double,
    customer_label int,
    PRIMARY KEY (customer_label,customer_code)
);
 
CREATE TABLE IF NOT EXISTS brand_dev.item_master (
    item_code int,
    item_name text,
    item_label int,
    category text,
    PRIMARY KEY (item_label,item_code)
);

CREATE TABLE IF NOT EXISTS brand_dev.transaction_master (
    customer_code int,
    item_code int,
    item_name text,
    item_rate double,
    quantity double,
    amount double,
    PRIMARY KEY ((item_code, customer_code), quantity)
    );

CREATE TABLE IF NOT EXISTS brand_dev.points_of_interest (
    category text,
    latitude double,
    longitude double,
    name text,
    PRIMARY KEY (category, latitude, longitude, name));

CREATE TABLE IF NOT EXISTS brand_dev.new_cluster(
    customer_code int,
    customer_name text,
    latitude double,
    longitude double,
    customer_label int,
    PRIMARY KEY (customer_label,customer_code)
);

# Dump Data
COPY customer_master (customer_code , customer_name , latitude , longitude, customer_label) FROM 'cluster_cords_final.csv' WITH header = true AND delimiter = ',';

COPY item_master (item_code , item_name , item_label, category) FROM 'item_master_final.csv' WITH header = true AND delimiter = ',';

COPY transaction_master (customer_code , item_code, item_name, item_rate, quantity, amount) FROM 'transaction_master.csv' WITH header = true AND delimiter = ',';

COPY points_of_interest (category, latitude, longitude, name) FROM 'pointsofinterest.csv' WITH header = true AND delimiter = ',';

# Create Functions
CREATE FUNCTION state_groupbyandsum( state map<int, double>, type int, amount double )
CALLED ON NULL INPUT
RETURNS map<int, double>
LANGUAGE java AS '
     Double count = (Double) state.get(type);
     if (count == null)
         count = amount;
     else
         count = count + amount;
     state.put(type, count);
     return state;
';

CREATE OR REPLACE AGGREGATE groupbyandsum(int, double) 
     SFUNC state_groupbyandsum 
     STYPE map<int, double> 
     INITCOND {};

# Alternate Query with functions
# SELECT item_code, sum(quantity) FROM transaction_master GROUP BY item_code;
SELECT groupbyandsum(item_code, quantity) from transaction_master ;